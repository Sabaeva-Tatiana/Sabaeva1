# 1. Функции в Python / Создание и вызов функций
#Напишите функцию greet(), которая просто выводит на экран приветствие "Добро пожаловать!".

def greet():
    print("Добро пожаловать!")

greet()

# 2. Аргументы функций
#Напишите функцию multiply(a, b), которая выводит на экран результат умножения двух чисел a и b.

def multiply(a, b):
    print(a * b)


multiply(a = 2, b = 2)

#3. Аргументы с дефолтными значениями
#Напишите функцию exponentiate(base, power=2), которая возвращает число base, возведенное в степень power.
# По умолчанию возводит число в квадрат.

def exponentiate(base, power=2):
    return(base ** power)

print(exponentiate(base=2, power=2))


# 4. Возвращение данных из функций
#Напишите функцию is_even(number), которая принимает число, проверяет, является ли оно четным, и возвращает True или False.

def is_even(number):

 if number % 2 == 0:
    return(True)
 else:
     return(False)

print(is_even(number=6))

# 5. Декораторы
# Напишите декоратор my_decorator, который добавляет вывод строки "Функция вызвана" до вызова основной функции и "Вызов функции завершен"
# после.

def my_decorator(func):
    def wrapper():
        print("Функция вызвана")
        func()
        print("Вызов функции завершен")
    return wrapper

# 1. Функции в Python / Создание и вызов функций
# Напишите функцию say_hello(), которая выводит на экран сообщение "Привет, мир!".

def say_hello():
    print("Привет, мир!")

say_hello()

# Аргументы по умолчанию
# Напишите функцию greet_user(name='Гость'), которая возвращает строку "Привет, {name}!".

def greet_user(name='Гость'):
    return(f"Привет, {name}!")

greet_user()

# 3. Логика в функциях
# Напишите функцию can_vote(age), которая возвращает True если age >= 18, и False в противном случае.

def can_vote(age):
    if age >= 18:
        return(True)
    else:
        return(False)

can_vote(17)

# Простой декоратор
# Напишите декоратор repeat_twice, который вызывает декорируемую функцию два раза.

def repeat_twice(func):
    def wrapper():
        func()
        func()
    return wrapper

# 1. Декоратор-счетчик
# Напишите декоратор call_counter, который добавляет функционал подсчета вызовов.
# При каждом вызове декорируемой функции выводите на экран "Функция вызвана [n] раз(а)".

def call_counter(func):
    count = 0  # Создаем переменную-счетчик вне функции wrapper

    def wrapper():
        nonlocal count  # Указываем, что используем переменную из внешней области видимости
        count += 1  # Увеличиваем счетчик на 1 при каждом вызове
        print(f"Функция вызвана {count} раз(а)")  # Выводим счетчик с помощью f-строки
        func()

    return wrapper  # Возвращаем саму функцию-обертку, а не результат ее вызова

# 2. Декоратор-замерщик
# Напишите декоратор simple_timer, который выводит на экран "Функция началась" до вызова и "Функция завершена"
# после вызова основной функции.
# Эта задача проще, потому что здесь не нужны счетчики и сложная логика, только два print-а и вызов функции между ними.

def simple_timer(func):
    def wrapper():
        print("Функция началась")
        func()
        print("Функция завершена")

    return wrapper

# 3. Декоратор с аргументами
# Напишите декоратор repeat(num), который вызывает декорируемую функцию указанное количество раз.

def repeat(num):
    def decor(func):
        def wrapper():
            for _ in range(num):
                func()

        return wrapper



# 4. Декоратор-валидатор
# Напишите декоратор check_positive, который проверяет, что результат функции — положительное число.
# Если нет, выводит "Результат отрицательный".

def check_positive(func):
    def wrapper():
        result = func()
        if result < 0:
            print("Результат отрицательный")
        return result
    return wrapper

